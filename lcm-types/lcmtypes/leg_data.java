/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class leg_data implements lcm.lcm.LCMEncodable
{
    public float q[];
    public float qd[];
    public float tau_fb[];
    public float tau_cmd[];
 
    public leg_data()
    {
        q = new float[12];
        qd = new float[12];
        tau_fb = new float[12];
        tau_cmd = new float[12];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xaf1e1e22b2d84182L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.leg_data.class))
            return 0L;
 
        classes.add(lcmtypes.leg_data.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.q[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.qd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.tau_fb[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.tau_cmd[a]); 
        }
 
    }
 
    public leg_data(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public leg_data(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.leg_data _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.leg_data o = new lcmtypes.leg_data();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.q = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.q[a] = ins.readFloat();
        }
 
        this.qd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.qd[a] = ins.readFloat();
        }
 
        this.tau_fb = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.tau_fb[a] = ins.readFloat();
        }
 
        this.tau_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.tau_cmd[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.leg_data copy()
    {
        lcmtypes.leg_data outobj = new lcmtypes.leg_data();
        outobj.q = new float[(int) 12];
        System.arraycopy(this.q, 0, outobj.q, 0, 12); 
        outobj.qd = new float[(int) 12];
        System.arraycopy(this.qd, 0, outobj.qd, 0, 12); 
        outobj.tau_fb = new float[(int) 12];
        System.arraycopy(this.tau_fb, 0, outobj.tau_fb, 0, 12); 
        outobj.tau_cmd = new float[(int) 12];
        System.arraycopy(this.tau_cmd, 0, outobj.tau_cmd, 0, 12); 
        return outobj;
    }
 
}

